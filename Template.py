#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Oct 17, 2022 11:04:37 PM AST  platform: Darwin

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path
import Peers
import threading
import time

_script = sys.argv[0]
_location = os.path.dirname(_script)

import Template_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black'
_tabfg2 = 'black'
_tabbg1 = 'grey75'
_tabbg2 = 'grey89'
_bgmode = 'light'

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    _style_code_ran = 1

class Toplevel1:
    def __init__(self,peer_object, top=None):
        self.Peers = peer_object
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x450+420+150")
        top.minsize(72, 15)
        top.maxsize(3360, 1027)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.messages = []
        self.peers = []


        self.Canvas1 = tk.Canvas(self.top)
        self.Canvas1.place(relx=0.017, rely=0.022, relheight=0.944
                , relwidth=0.975)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")

        self.Canvas2 = tk.Canvas(self.Canvas1)
        self.Canvas2.place(relx=0.017, rely=0.0, relheight=0.129, relwidth=0.966)

        self.Canvas2.configure(background="#d9d9d9")
        self.Canvas2.configure(borderwidth="2")
        self.Canvas2.configure(highlightbackground="#d9d9d9")
        self.Canvas2.configure(highlightcolor="black")
        self.Canvas2.configure(insertbackground="black")
        self.Canvas2.configure(relief="ridge")
        self.Canvas2.configure(selectbackground="#c4c4c4")
        self.Canvas2.configure(selectforeground="black")

        self.IOMA = tk.Label(self.Canvas2)
        self.IOMA.place(relx=0.265, rely=0.182, height=27, width=229)
        self.IOMA.configure(anchor='w')
        self.IOMA.configure(background="#d9d9d9")
        self.IOMA.configure(compound='left')
        self.IOMA.configure(foreground="#000000")
        self.IOMA.configure(text='''Inter-Office Mesaging Application''')

        self.Canvas3 = tk.Canvas(self.Canvas1)
        self.Canvas3.place(relx=0.017, rely=0.141, relheight=0.106
                , relwidth=0.368)
        self.Canvas3.configure(background="#d9d9d9")
        self.Canvas3.configure(borderwidth="2")
        self.Canvas3.configure(highlightbackground="#d9d9d9")
        self.Canvas3.configure(highlightcolor="black")
        self.Canvas3.configure(insertbackground="black")
        self.Canvas3.configure(relief="ridge")
        self.Canvas3.configure(selectbackground="#c4c4c4")
        self.Canvas3.configure(selectforeground="black")

        self.Label2 = tk.Label(self.Canvas3)
        self.Label2.place(relx=0.372, rely=0.222, height=22, width=79)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='center')
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Peers''')

        self.Canvas4 = tk.Canvas(self.Canvas1)
        self.Canvas4.place(relx=0.393, rely=0.141, relheight=0.106
                , relwidth=0.59)
        self.Canvas4.configure(background="#d9d9d9")
        self.Canvas4.configure(borderwidth="2")
        self.Canvas4.configure(highlightbackground="#d9d9d9")
        self.Canvas4.configure(highlightcolor="black")
        self.Canvas4.configure(insertbackground="black")
        self.Canvas4.configure(relief="ridge")
        self.Canvas4.configure(selectbackground="#c4c4c4")
        self.Canvas4.configure(selectforeground="black")

        self.Label3 = tk.Label(self.Canvas4)
        self.Label3.place(relx=0.348, rely=0.222, height=22, width=109)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(compound='center')
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Message List''')

        self.Canvas5 = tk.Canvas(self.Canvas1)
        self.Canvas5.place(relx=0.017, rely=0.259, relheight=0.718
                , relwidth=0.368)
        self.Canvas5.configure(background="#d9d9d9")
        self.Canvas5.configure(borderwidth="2")
        self.Canvas5.configure(highlightbackground="#d9d9d9")
        self.Canvas5.configure(highlightcolor="black")
        self.Canvas5.configure(insertbackground="black")
        self.Canvas5.configure(relief="ridge")
        self.Canvas5.configure(selectbackground="#c4c4c4")
        self.Canvas5.configure(selectforeground="black")

        self.Download_messagesButton = tk.Button(self.Canvas5)
        self.Download_messagesButton.place(relx=0.14, rely=0.689, height=48
                , width=137)
        self.Download_messagesButton.configure(activebackground="beige")
        self.Download_messagesButton.configure(activeforeground="black")
        self.Download_messagesButton.configure(background="#d9d9d9")
        self.Download_messagesButton.configure(compound='left')
        self.Download_messagesButton.configure(foreground="#000000")
        self.Download_messagesButton.configure(highlightbackground="#d9d9d9")
        self.Download_messagesButton.configure(highlightcolor="black")
        self.Download_messagesButton.configure(text='''Button''',command=lambda: self.download_chat())





        self.Canvas6 = tk.Canvas(self.Canvas1)
        self.Canvas6.place(relx=0.034, rely=0.282, relheight=0.365
                , relwidth=0.333)
        self.Canvas6.configure(background="#d9d9d9")
        self.Canvas6.configure(borderwidth="2")
        self.Canvas6.configure(highlightbackground="#d9d9d9")
        self.Canvas6.configure(highlightcolor="black")
        self.Canvas6.configure(insertbackground="black")
        self.Canvas6.configure(relief="ridge")
        self.Canvas6.configure(selectbackground="#c4c4c4")
        self.Canvas6.configure(selectforeground="black")

        self.Peers_List_Box = tk.Listbox(self.Canvas6)
        self.Peers_List_Box.place(relx=0.051, rely=0.065, relheight=0.826
                , relwidth=0.882)
        self.Peers_List_Box.configure(background="white")
        self.Peers_List_Box.configure(font="TkFixedFont")
        self.Peers_List_Box.configure(foreground="#000000")
        self.Peers_List_Box.configure(highlightbackground="#d9d9d9")
        self.Peers_List_Box.configure(highlightcolor="black")
        self.Peers_List_Box.configure(selectbackground="#c4c4c4")
        self.Peers_List_Box.configure(selectforeground="black")

        self.Canvas7 = tk.Canvas(self.Canvas1)
        self.Canvas7.place(relx=0.393, rely=0.259, relheight=0.412
                , relwidth=0.59)
        self.Canvas7.configure(background="#d9d9d9")
        self.Canvas7.configure(borderwidth="2")
        self.Canvas7.configure(highlightbackground="#d9d9d9")
        self.Canvas7.configure(highlightcolor="black")
        self.Canvas7.configure(insertbackground="black")
        self.Canvas7.configure(relief="ridge")
        self.Canvas7.configure(selectbackground="#c4c4c4")
        self.Canvas7.configure(selectforeground="black")

        self.Message_List_Box = tk.Listbox(self.Canvas7)
        self.Message_List_Box.place(relx=0.029, rely=0.057, relheight=0.903
                , relwidth=0.933)
        self.Message_List_Box.configure(background="white")
        self.Message_List_Box.configure(font="TkFixedFont")
        self.Message_List_Box.configure(foreground="#000000")

        self.Canvas8 = tk.Canvas(self.Canvas1)
        self.Canvas8.place(relx=0.393, rely=0.682, relheight=0.294
                , relwidth=0.59)
        self.Canvas8.configure(background="#d9d9d9")
        self.Canvas8.configure(borderwidth="2")
        self.Canvas8.configure(highlightbackground="#d9d9d9")
        self.Canvas8.configure(highlightcolor="black")
        self.Canvas8.configure(insertbackground="black")
        self.Canvas8.configure(relief="ridge")
        self.Canvas8.configure(selectbackground="#c4c4c4")
        self.Canvas8.configure(selectforeground="black")

        _style_code()
        self.Message_Entry = tk.Text(self.Canvas8)
        self.Message_Entry.place(relx=0.029, rely=0.4, relheight=0.536
                , relwidth=0.939)
        self.Message_Entry.configure(takefocus="")
        self.Message_Entry.configure(cursor="ibeam")

        self.Message_Send = tk.Button(self.Canvas8)
        self.Message_Send.place(relx=0.725, rely=0.08, height=28, width=77)
        self.Message_Send.configure(activebackground="beige")
        self.Message_Send.configure(activeforeground="black")
        self.Message_Send.configure(background="#d9d9d9")
        self.Message_Send.configure(compound='left')
        self.Message_Send.configure(foreground="#000000")
        self.Message_Send.configure(highlightbackground="#d9d9d9")
        self.Message_Send.configure(highlightcolor="black")
        self.Message_Send.configure(text='''SEND''', command=self.send_messsage)

        self.Label1 = tk.Label(self.Canvas8)
        self.Label1.place(relx=0.058, rely=0.08, height=32, width=89)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='center')
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''MESSAGE''')

        self.top.protocol("WM_DELETE_WINDOW", self.leave)

        self.Server_listener = threading.Thread(target=lambda: self.update(self.Peers),daemon=True)
        self.Server_listener.start()



    def send_messsage(self):
        txt = self.Message_Entry.get("1.0",END)
        self.Peers.send_information(txt[:-1])
        self.Message_Entry.delete("1.0",END)

    def leave(self):
        self.Peers.peer_exit()
        self.top.destroy()

    def download_chat(self):
        with open('chat.txt','w') as filehandle:
            for item in self.messages:
                filehandle.write('%s\n' % item)

    def update(self,Peers):
        print("clientes conectados: ", self.Peers.peer_list)
        #print(self.Peers.messages)
        while True:

            if Peers.messages != self.messages:
                self.messages.clear()
                self.Message_List_Box.delete(0, END)
                for val in Peers.messages:
                    if Peers.user not in val:
                        self.messages.append(val)
                        self.Message_List_Box.insert(END, val)
            elif Peers.peer_list != self.peers:
                self.peers.clear()
                self.Peers_List_Box.delete(0, tk.END)
                for val in Peers.peer_list:
                    self.peers.append(tuple(val))
                    self.Peers_List_Box.insert(tk.END, val)
            time.sleep(10)

def start_up():
    Template_support.main()

if __name__ == '__main__':
    Template_support.main()
